{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Pyppium! Pyppium is a wrapper of Appium-Python-Client for cross mobile testing. Project Motivation Pyppium has been mainly developed thinking in the Quality Assurance cross tests scenarios problems. Among them the most common problems are: - A lot of conditionals along the tests. - Duplicate of screens to isolate the problem above. - Add a baseScreen or a helper to repetitive waits scenarios. Thinking in this bored repetitive work and problems pyppium came to help you to dont waste your time with this implementations. Philosophy Pyppium trying to work on technical layer to abstract some appium behaviours to help on QA usability. With pyppium you will see: Screen Object Pattern with abstraction to fetch elements. Cross Mobile Testing focus, with some utilities to commons problems. Focus on QA daily problems, like waits, configurations and some boilerplate. GitHub Page Contributions are welcome always, lets grow up together! - Pyppium Git Hub Especial Thanks Pyppium enjoy many packages to trying delivery a good framework. And of course this packages are amazing! Appium-Python-Client PyYAML Pytest Assertpy Black Pytest-mock Pytest-cov Codecov Mkdocs Tox","title":"Welcome to Pyppium!"},{"location":"#welcome-to-pyppium","text":"Pyppium is a wrapper of Appium-Python-Client for cross mobile testing.","title":"Welcome to Pyppium!"},{"location":"#project-motivation","text":"Pyppium has been mainly developed thinking in the Quality Assurance cross tests scenarios problems. Among them the most common problems are: - A lot of conditionals along the tests. - Duplicate of screens to isolate the problem above. - Add a baseScreen or a helper to repetitive waits scenarios. Thinking in this bored repetitive work and problems pyppium came to help you to dont waste your time with this implementations.","title":"Project Motivation"},{"location":"#philosophy","text":"Pyppium trying to work on technical layer to abstract some appium behaviours to help on QA usability. With pyppium you will see: Screen Object Pattern with abstraction to fetch elements. Cross Mobile Testing focus, with some utilities to commons problems. Focus on QA daily problems, like waits, configurations and some boilerplate.","title":"Philosophy"},{"location":"#github-page","text":"Contributions are welcome always, lets grow up together! - Pyppium Git Hub","title":"GitHub Page"},{"location":"#especial-thanks","text":"Pyppium enjoy many packages to trying delivery a good framework. And of course this packages are amazing! Appium-Python-Client PyYAML Pytest Assertpy Black Pytest-mock Pytest-cov Codecov Mkdocs Tox","title":"Especial Thanks"},{"location":"decorators-usage/","text":"Decorators Info Documentation is under construction.","title":"Decorators"},{"location":"decorators-usage/#decorators","text":"Info Documentation is under construction.","title":"Decorators"},{"location":"fetcher-usage/","text":"Fecther Info Documentation is under construction.","title":"Fecther"},{"location":"fetcher-usage/#fecther","text":"Info Documentation is under construction.","title":"Fecther"},{"location":"getting-started/","text":"QuickStart The fastest way to start using pyppium is learning the about basic pyppium driver and fetcher. Basic Usage of Pyppium Driver Create your capabilities as usual. caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } Import and add capabilities in pyppium driver init. from pyppium.driver import PyppiumDriver PyppiumDriver ( caps_android ) Quit driver after test run. PyppiumDriver . quit () Info The pyppium driver default url connects to http://localhost:4723/wd/hub , if you want to override send url parameter like this sample PyppiumDriver(\"http://my-url-here\", caps_android) Basic Usage of Fetcher Structure your screen with fetcher, this sample is about a login screen. from pyppium.fetcher import fetch , iOS , Android class ScreenOne : _button = fetch ( iOS ( \"id\" , \"buttonSignIn\" ), Android ( \"id\" , \"button\" )) _text_field = fetch ( iOS ( \"id\" , \"inputUserName\" ), Android ( \"id\" , \"username\" )) _text_password = fetch ( iOS ( \"id\" , \"InputPassword\" ), Android ( \"id\" , \"pass\" )) def login ( self , username , password ): self . _text_field . send_keys ( username ) self . _text_password . send_keys ( password ) self . _button . click () In this app the another screen is a welcome screen before login. from pyppium.fetcher import fetch , iOS , Android class ScreenTwo : _label = fetch ( iOS ( \"id\" , \"labelHello\" ), Android ( \"id\" , \"welcome_message\" )) def label_welcome_message ( self ): return self . _label . text Info The fetcher always wait element to be visible. Testing Create your test and use your screens and pyppium driver. def test_android_basic_behaviours (): username = \"Lully\" password = \"123456789\" caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } PyppiumDriver ( caps_android ) ScreenOne () . login ( username , password ) assert username in ScreenTwo () . label_welcome_message () PyppiumDriver . quit () Warning The fetcher module search element by platform in capabilities. He only search for Android or iOS , if platformName is android he looking for android element and if ios he looking for ios element.","title":"QuickStart"},{"location":"getting-started/#quickstart","text":"The fastest way to start using pyppium is learning the about basic pyppium driver and fetcher.","title":"QuickStart"},{"location":"getting-started/#basic-usage-of-pyppium-driver","text":"Create your capabilities as usual. caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } Import and add capabilities in pyppium driver init. from pyppium.driver import PyppiumDriver PyppiumDriver ( caps_android ) Quit driver after test run. PyppiumDriver . quit () Info The pyppium driver default url connects to http://localhost:4723/wd/hub , if you want to override send url parameter like this sample PyppiumDriver(\"http://my-url-here\", caps_android)","title":"Basic Usage of Pyppium Driver"},{"location":"getting-started/#basic-usage-of-fetcher","text":"Structure your screen with fetcher, this sample is about a login screen. from pyppium.fetcher import fetch , iOS , Android class ScreenOne : _button = fetch ( iOS ( \"id\" , \"buttonSignIn\" ), Android ( \"id\" , \"button\" )) _text_field = fetch ( iOS ( \"id\" , \"inputUserName\" ), Android ( \"id\" , \"username\" )) _text_password = fetch ( iOS ( \"id\" , \"InputPassword\" ), Android ( \"id\" , \"pass\" )) def login ( self , username , password ): self . _text_field . send_keys ( username ) self . _text_password . send_keys ( password ) self . _button . click () In this app the another screen is a welcome screen before login. from pyppium.fetcher import fetch , iOS , Android class ScreenTwo : _label = fetch ( iOS ( \"id\" , \"labelHello\" ), Android ( \"id\" , \"welcome_message\" )) def label_welcome_message ( self ): return self . _label . text Info The fetcher always wait element to be visible.","title":"Basic Usage of Fetcher"},{"location":"getting-started/#testing","text":"Create your test and use your screens and pyppium driver. def test_android_basic_behaviours (): username = \"Lully\" password = \"123456789\" caps_android = { \"platformName\" : \"Android\" , \"automationName\" : \"uiautomator2\" , \"deviceName\" : \"Android Emulator\" , \"appPackage\" : \"com.example.dummy\" , \"appActivity\" : \"MainActivity\" , \"newCommandTimeout\" : 0 , } PyppiumDriver ( caps_android ) ScreenOne () . login ( username , password ) assert username in ScreenTwo () . label_welcome_message () PyppiumDriver . quit () Warning The fetcher module search element by platform in capabilities. He only search for Android or iOS , if platformName is android he looking for android element and if ios he looking for ios element.","title":"Testing"},{"location":"installation/","text":"Installation Pip You can install pyppium using pip as usual. pip install pyppium GitHub Or you can use github repository like samples below. Latest Version pip install git+https://github.com/leomenezessz/pyppium Tagged Version pip install git+https://github.com/leomenezessz/pyppium@v0.1.1","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#pip","text":"You can install pyppium using pip as usual. pip install pyppium","title":"Pip"},{"location":"installation/#github","text":"Or you can use github repository like samples below.","title":"GitHub"},{"location":"installation/#latest-version","text":"pip install git+https://github.com/leomenezessz/pyppium","title":"Latest Version"},{"location":"installation/#tagged-version","text":"pip install git+https://github.com/leomenezessz/pyppium@v0.1.1","title":"Tagged Version"},{"location":"pyppium-driver-usage/","text":"Pyppium Driver Info Documentation is under construction.","title":"Pyppium Driver"},{"location":"pyppium-driver-usage/#pyppium-driver","text":"Info Documentation is under construction.","title":"Pyppium Driver"}]}